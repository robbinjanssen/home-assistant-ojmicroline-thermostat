[tool.poetry]
name = "home-assistant-ojmicroline-thermostat"
version = "1.2.0"
description = "Control your OJ Microline Thermostat using home assistant."
authors = ["Robbin Janssen <robbinjanssen@gmail.com>"]
maintainers = ["Robbin Janssen <robbinjanssen@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/robbinjanssen/home-assistant-ojmicroline-thermostat"
repository = "https://github.com/robbinjanssen/home-assistant-ojmicroline-thermostat"
documentation = "https://github.com/robbinjanssen/home-assistant-ojmicroline-thermostat"
classifiers = [
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
ojmicroline-thermostat = { git = "https://github.com/robbinjanssen/python-ojmicroline-thermostat.git", branch = "main" }
voluptuous = "^0.14.2"

[tool.poetry.group.dev.dependencies]
codespell = "2.2.6"
mypy = "1.8.0"
pre-commit = "3.6.2"
pre-commit-hooks = "4.5.0"
pylint = "3.0.3"
ruff = "0.2.1"
yamllint = "1.35.1"
async-timeout = "4.0.3"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pylint.TYPECHECK]
ignored-modules = [
  "ojmicroline_thermostat",
  "homeassistant",
]

[tool.ruff]
target-version = "py311"
lint.select = ["ALL"]
lint.ignore = [
  "ANN101",  # Self... explanatory
  "ANN102",  # cls... just as useless
  "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
  "D203",    # Conflicts with other rules
  "D213",    # Conflicts with other rules
  "D417",    # False positives in some occasions
  "PLR2004", # Just annoying, not really useful
  "SLOT000", # Has a bug with enums: https://github.com/astral-sh/ruff/issues/5748

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]

[tool.ruff.lint.per-file-ignores]
"test_output.py" = ["ERA001", "T201"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["omnikinverter"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
